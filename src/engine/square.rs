use std::collections::HashMap;

#[derive(Debug)]
pub enum Square {
    A1,
    B1,
    C1,
    D1,
    E1,
    F1,
    G1,
    H1,
    A2,
    B2,
    C2,
    D2,
    E2,
    F2,
    G2,
    H2,
    A3,
    B3,
    C3,
    D3,
    E3,
    F3,
    G3,
    H3,
    A4,
    B4,
    C4,
    D4,
    E4,
    F4,
    G4,
    H4,
    A5,
    B5,
    C5,
    D5,
    E5,
    F5,
    G5,
    H5,
    A6,
    B6,
    C6,
    D6,
    E6,
    F6,
    G6,
    H6,
    A7,
    B7,
    C7,
    D7,
    E7,
    F7,
    G7,
    H7,
    A8,
    B8,
    C8,
    D8,
    E8,
    F8,
    G8,
    H8,
}

impl Square {
    pub fn parse(algebra: &str) -> Option<Square> {
        match algebra {
            "a1" => Option::from(Square::A1),
            "b1" => Option::from(Square::B1),
            "c1" => Option::from(Square::C1),
            "d1" => Option::from(Square::D1),
            "e1" => Option::from(Square::E1),
            "f1" => Option::from(Square::F1),
            "g1" => Option::from(Square::G1),
            "h1" => Option::from(Square::H1),
            "a2" => Option::from(Square::A2),
            "b2" => Option::from(Square::B2),
            "c2" => Option::from(Square::C2),
            "d2" => Option::from(Square::D2),
            "e2" => Option::from(Square::E2),
            "f2" => Option::from(Square::F2),
            "g2" => Option::from(Square::G2),
            "h2" => Option::from(Square::H2),
            "a3" => Option::from(Square::A3),
            "b3" => Option::from(Square::B3),
            "c3" => Option::from(Square::C3),
            "d3" => Option::from(Square::D3),
            "e3" => Option::from(Square::E3),
            "f3" => Option::from(Square::F3),
            "g3" => Option::from(Square::G3),
            "h3" => Option::from(Square::H3),
            "a4" => Option::from(Square::A4),
            "b4" => Option::from(Square::B4),
            "c4" => Option::from(Square::C4),
            "d4" => Option::from(Square::D4),
            "e4" => Option::from(Square::E4),
            "f4" => Option::from(Square::F4),
            "g4" => Option::from(Square::G4),
            "h4" => Option::from(Square::H4),
            "a5" => Option::from(Square::A5),
            "b5" => Option::from(Square::B5),
            "c5" => Option::from(Square::C5),
            "d5" => Option::from(Square::D5),
            "e5" => Option::from(Square::E5),
            "f5" => Option::from(Square::F5),
            "g5" => Option::from(Square::G5),
            "h5" => Option::from(Square::H5),
            "a6" => Option::from(Square::A6),
            "b6" => Option::from(Square::B6),
            "c6" => Option::from(Square::C6),
            "d6" => Option::from(Square::D6),
            "e6" => Option::from(Square::E6),
            "f6" => Option::from(Square::F6),
            "g6" => Option::from(Square::G6),
            "h6" => Option::from(Square::H6),
            "a7" => Option::from(Square::A7),
            "b7" => Option::from(Square::B7),
            "c7" => Option::from(Square::C7),
            "d7" => Option::from(Square::D7),
            "e7" => Option::from(Square::E7),
            "f7" => Option::from(Square::F7),
            "g7" => Option::from(Square::G7),
            "h7" => Option::from(Square::H7),
            "a8" => Option::from(Square::A8),
            "b8" => Option::from(Square::B8),
            "c8" => Option::from(Square::C8),
            "d8" => Option::from(Square::D8),
            "e8" => Option::from(Square::E8),
            "f8" => Option::from(Square::F8),
            "g8" => Option::from(Square::G8),
            "h8" => Option::from(Square::H8),
            _ => Option::None,
        }
    }
}
